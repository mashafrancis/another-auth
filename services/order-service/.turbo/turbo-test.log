
> order-service@0.0.6 test
> PRETTY_PRINT=true jest --forceExit --verbose=true --runInBand

global-setup: 13.14ms
[1682589566626] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mServer is about to listen to port 0[39m
[1682589566647] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to add new Order {
  userId: 1,
  productId: 2,
  countryId: 1,
  deliveryAddress: '123 Main St, New York, NY 10001',
  paymentTermsInDays: 30
}[39m
{"level":50,"time":1682589566816,"pid":31841,"hostname":"Yonis-MacBook-Pro-2.local","msg":"Validation failed"}
  console.log
    In real production code I will really fire metrics { name: 'error', labels: { errorName: 'invalid-order' } }

      at Object.fireMetric (../../libraries/error-handling/.dist/index.js:96:17)

{"level":50,"time":1682589566835,"pid":31841,"hostname":"Yonis-MacBook-Pro-2.local","msg":"The user 7 doesnt exist"}
  console.log
    In real production code I will really fire metrics { name: 'error', labels: { errorName: 'user-doesnt-exist' } }

      at Object.fireMetric (../../libraries/error-handling/.dist/index.js:96:17)

[1682589566793] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mSequelize operation was just executed in 4 ms with sql: Executed (default): INSERT INTO "Order" ("id","deliveryAddress","userId","countryId","paymentTermsInDays","productId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","deliveryAddress","userId","countryId","paymentTermsInDays","productId","createdAt","updatedAt"; "123 Main St, New York, NY 10001", 1, 1, 30, 2, "2023-04-27 09:59:26.715 +00:00", "2023-04-27 09:59:26.715 +00:00"[39m
[1682589566798] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to add new Order {
  userId: 1,
  productId: 2,
  countryId: 1,
  deliveryAddress: '123 Main St, New York, NY 10001',
  paymentTermsInDays: 30
}[39m
[1682589566805] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mSequelize operation was just executed in 1 ms with sql: Executed (default): INSERT INTO "Order" ("id","deliveryAddress","userId","countryId","paymentTermsInDays","productId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","deliveryAddress","userId","countryId","paymentTermsInDays","productId","createdAt","updatedAt"; "123 Main St, New York, NY 10001", 1, 1, 30, 2, "2023-04-27 09:59:26.802 +00:00", "2023-04-27 09:59:26.802 +00:00"[39m
[1682589566806] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to get user by id 6[39m
[1682589566813] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mSequelize operation was just executed in 3 ms with sql: Executed (default): SELECT "Order"."id", "Order"."deliveryAddress", "Order"."userId", "Order"."countryId", "Order"."paymentTermsInDays", "Order"."productId", "Order"."createdAt", "Order"."updatedAt", "Country"."id" AS "Country.id", "Country"."name" AS "Country.name" FROM "Order" AS "Order" LEFT OUTER JOIN "Country" AS "Country" ON "Order"."countryId" = "Country"."id" WHERE "Order"."id" = 6;[39m
[1682589566815] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to add new Order {
  userId: 1,
  deliveryAddress: '123 Main St, New York, NY 10001',
  paymentTermsInDays: 30
}[39m
[1682589566833] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to add new Order {
  userId: 7,
  productId: 1,
  countryId: 1,
  deliveryAddress: '123 Main St, New York, NY 10001',
  paymentTermsInDays: 30
}[39m
PASS test/add-order.test.ts (2.57 s)
  /api
    POST /orders
      âœ“ When adding a new valid order, Then should get back approval with 200 response (168 ms)
      âœ“ When adding a new valid order, Then should be able to retrieve it (17 ms)
      âœ“ When adding an order without specifying product, stop and return 400 (17 ms)
      âœ“ When the user does not exist, return 404 response (5 ms)
      âœŽ todo When a new order failed, an invalid-order error was handled
      âœŽ todo When a new valid order was added, then order-added metric was fired
      âœŽ todo When the user service is down, then order is still added successfully

[1682589567320] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mServer is about to listen to port 0[39m
[1682589567329] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to add new Order {
  userId: 1,
  productId: 2,
  countryId: 1,
  deliveryAddress: '123 Main St, New York, NY 10001',
  paymentTermsInDays: 30
}[39m
[1682589567442] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mSequelize operation was just executed in 2 ms with sql: Executed (default): INSERT INTO "Order" ("id","deliveryAddress","userId","countryId","paymentTermsInDays","productId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","deliveryAddress","userId","countryId","paymentTermsInDays","productId","createdAt","updatedAt"; "123 Main St, New York, NY 10001", 1, 1, 30, 2, "2023-04-27 09:59:27.371 +00:00", "2023-04-27 09:59:27.371 +00:00"[39m
[1682589567445] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to get user by id 7[39m
[1682589567454] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mSequelize operation was just executed in 4 ms with sql: Executed (default): SELECT "Order"."id", "Order"."deliveryAddress", "Order"."userId", "Order"."countryId", "Order"."paymentTermsInDays", "Order"."productId", "Order"."createdAt", "Order"."updatedAt", "Country"."id" AS "Country.id", "Country"."name" AS "Country.name" FROM "Order" AS "Order" LEFT OUTER JOIN "Country" AS "Country" ON "Order"."countryId" = "Country"."id" WHERE "Order"."id" = 7;[39m
[1682589567458] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to get user by id -1[39m
[1682589567461] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mSequelize operation was just executed in 1 ms with sql: Executed (default): SELECT "Order"."id", "Order"."deliveryAddress", "Order"."userId", "Order"."countryId", "Order"."paymentTermsInDays", "Order"."productId", "Order"."createdAt", "Order"."updatedAt", "Country"."id" AS "Country.id", "Country"."name" AS "Country.name" FROM "Order" AS "Order" LEFT OUTER JOIN "Country" AS "Country" ON "Order"."countryId" = "Country"."id" WHERE "Order"."id" = -1;[39m
PASS test/get-order.test.ts (0.614 s)
  /api
    GET /order
      âœ“ When asked for an existing order, Then should retrieve it and receive 200 response (136 ms)
      âœ“ When asked for an non-existing order, Then should receive 404 response (4 ms)

[1682589567952] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mServer is about to listen to port 0[39m
[1682589567964] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to add new Order {
  userId: 1,
  productId: 2,
  countryId: 1,
  deliveryAddress: '123 Main St, New York, NY 10001',
  paymentTermsInDays: 30
}[39m
[1682589568041] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mSequelize operation was just executed in 1 ms with sql: Executed (default): INSERT INTO "Order" ("id","deliveryAddress","userId","countryId","paymentTermsInDays","productId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","deliveryAddress","userId","countryId","paymentTermsInDays","productId","createdAt","updatedAt"; "123 Main St, New York, NY 10001", 1, 1, 30, 2, "2023-04-27 09:59:28.004 +00:00", "2023-04-27 09:59:28.004 +00:00"[39m
[1682589568043] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to delete order 8[39m
[1682589568046] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mSequelize operation was just executed in 1 ms with sql: Executed (default): DELETE FROM "Order" WHERE "id" = 8[39m
[1682589568047] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mOrder API was called to get user by id 8[39m
[1682589568055] [32mINFO[39m (31841 on Yonis-MacBook-Pro-2.local): [36mSequelize operation was just executed in 4 ms with sql: Executed (default): SELECT "Order"."id", "Order"."deliveryAddress", "Order"."userId", "Order"."countryId", "Order"."paymentTermsInDays", "Order"."productId", "Order"."createdAt", "Order"."updatedAt", "Country"."id" AS "Country.id", "Country"."name" AS "Country.name" FROM "Order" AS "Order" LEFT OUTER JOIN "Country" AS "Country" ON "Order"."countryId" = "Country"."id" WHERE "Order"."id" = 8;[39m
PASS test/delete-order.test.ts (0.592 s)
  /api
    DELETE /order
      âœ“ When deleting an existing order, Then it should NOT be retrievable (102 ms)

----------------------------------|---------|----------|---------|---------|-------------------
File                              | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------------------------------|---------|----------|---------|---------|-------------------
All files                         |   94.33 |     87.5 |      84 |   94.33 |                   
 order-service                    |     100 |      100 |     100 |     100 |                   
  config.ts                       |     100 |      100 |     100 |     100 |                   
 order-service/data-access        |   95.12 |      100 |      75 |   95.12 |                   
  order-repository.ts             |   95.12 |      100 |      75 |   95.12 | 40-41             
 order-service/data-access/models |     100 |      100 |     100 |     100 |                   
  country-model.ts                |     100 |      100 |     100 |     100 |                   
  db-connection.ts                |     100 |      100 |     100 |     100 |                   
  order-model.ts                  |     100 |      100 |     100 |     100 |                   
 order-service/domain             |   92.63 |    84.61 |     100 |   92.63 |                   
  new-order-use-case.ts           |     100 |      100 |     100 |     100 |                   
  order-schema.ts                 |     100 |      100 |     100 |     100 |                   
  order-validators.ts             |   74.07 |       75 |     100 |   74.07 | 16-22             
  payment-terms-service.ts        |     100 |       50 |     100 |     100 | 4                 
  user-service-client.ts          |     100 |      100 |     100 |     100 |                   
 order-service/entry-points/api   |   96.45 |    82.35 |     100 |   96.45 |                   
  routes.ts                       |      96 |    85.71 |     100 |      96 | 38-39             
  server.ts                       |    96.7 |       80 |     100 |    96.7 | 47,81-82          
 order-service/test               |   62.79 |      100 |      40 |   62.79 |                   
  test-helpers.ts                 |   62.79 |      100 |      40 |   62.79 | 5-14,20-22,24-26  
----------------------------------|---------|----------|---------|---------|-------------------
Test Suites: 3 passed, 3 total
Tests:       3 todo, 7 passed, 10 total
Snapshots:   0 total
Time:        3.888 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
